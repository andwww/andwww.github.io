<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Drupal8 基本介绍</title>
    <link href="/2020/05/21/Drupal8%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <url>/2020/05/21/Drupal8%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="Drupal8-基本介绍"><a href="#Drupal8-基本介绍" class="headerlink" title="Drupal8 基本介绍"></a>Drupal8 基本介绍</h3><p>Drupal是一个高度模块化的CMS，在<a href="https://www.drupal.org/docs" target="_blank" rel="noopener">drupal.org</a>上提供了数以万计的模块。使用Drupal开发网站就像搭积木一样，在社区都可以找到适合你的模块。</p><h4 id="Drupal8-主要特点"><a href="#Drupal8-主要特点" class="headerlink" title="Drupal8 主要特点"></a>Drupal8 主要特点</h4><ul><li>1）、node(节点)</li></ul><p>node是Drupal系统的核心，当你想做一个博客系统的时候，可以方便的定义标题、内容、作者等信息。如果node不能满足你的要求，你也可以写扩展。</p><p>评论(comment)也是一个Drupal的一个特色，可以在内容类型设置开启或关闭评论。</p><ul><li>2）、用户权限系统</li></ul><p>Drupal的用户权限系统设计非常精妙，可以精确到URL级别的权限。</p><ul><li>3）、区块与菜单</li></ul><p>区块与菜单用来组织内容的显示，如热点内容区块可以将点击次数最多的内容显示在页面上，区块功能非常强大，可以配置区块的显示位置，或为某一类用户显示等等。菜单用于网站的导航。</p><ul><li>4）、模块</li></ul><p>模块是为Drupal系统提供功能的程序集，Drupal内核自带一些基本的模块以实现站点的基本功能，Drupal的社区中有数以万计的模块可供选用，如e-commerce模块可以实现在线商店功能。</p><ul><li>5）、主题</li></ul><p>主题层控制网站的最终外观，它包含模板引擎、资源库(CSS、JS、图像等)。</p><h4 id="Drupal8-目录结构"><a href="#Drupal8-目录结构" class="headerlink" title="Drupal8 目录结构"></a>Drupal8 目录结构</h4><pre><code class="hljs plain">project├── autoload.php├── composer.json├── composer.lock├── core                                            &#x2F;&#x2F; Drupal8 核心代码│   ├── assets│   ├── authorize.php│   ├── CHANGELOG.txt│   ├── composer.json│   ├── config│   ├── COPYRIGHT.txt│   ├── core.api.php│   ├── core.libraries.yml│   ├── core.link_relation_types.yml│   ├── core.services.yml│   ├── drupalci.yml│   ├── globals.api.php│   ├── includes│   ├── INSTALL.mysql.txt│   ├── INSTALL.pgsql.txt│   ├── install.php│   ├── INSTALL.sqlite.txt│   ├── INSTALL.txt│   ├── lib│   ├── LICENSE.txt│   ├── MAINTAINERS.txt│   ├── misc│   ├── modules                                    &#x2F;&#x2F; Drupal8 系统核心模块│   ├── package.json│   ├── phpcs.xml.dist│   ├── phpunit.xml.dist│   ├── profiles│   ├── rebuild.php│   ├── scripts│   ├── tests│   ├── themes                                     &#x2F;&#x2F; Drupal8 系统核心主题│   ├── UPDATE.txt│   └── yarn.lock├── example.gitignore├── index.php├── INSTALL.txt├── LICENSE.txt├── modules                                        &#x2F;&#x2F; Drupal8 模块安装文件│   └── README.txt├── profiles│   └── README.txt├── README.txt├── robots.txt├── sites│   ├── default│   ├── development.services.yml│   ├── example.settings.local.php│   ├── example.sites.php│   └── README.txt├── themes                                         &#x2F;&#x2F; Drupal8 主题安装文件│   └── README.txt├── update.php└── web.config</code></pre><h4 id="基本术语介绍"><a href="#基本术语介绍" class="headerlink" title="基本术语介绍"></a>基本术语介绍</h4><ul><li>节点(node)</li></ul><p>根据不同的节点类型附加不同的字段，这就是内容类型。例如’base page’类型包含标题、主体字段。还有许多内容类型如文章、书页、讨论主题、博客页等。</p><ul><li>实体类型(entity)</li></ul><p>实体类型是包含一组字段的抽象概念。实体用于存储和显示数据，节点内容、评论、分类、用户等都是实体，模块可以自定义实体类型。</p><ul><li>评论(comment)</li></ul><p>评论是一种内容类型，它由Drupal核心Comment模块开启。每一条评论是用户写的一段内容，这段内容被附加到评论的节点。例如论坛中的评论被附加到特定的话题。</p><ul><li>分类(taxonomy)</li></ul><p>Drupal系统使用taxonomy来对内容进行分类。它是由Drupal的核心模块Taxonomy提供。你可以定义词汇并在词汇下添加术语。每一个词汇能附加到一个或多个内容类型，节点内容使用分类、标签等进行分组。</p><ul><li>用户(user)</li></ul><p>这里的用户是指访问你站点的真正访问者，它是一个实体类型。一般地用户具有用户名、密码、角色、e-mail地址等属性。贡献模块也可以自定义其它的用户属性。例如你可以为用户的Twitter地址增加一个”Link”。</p><ul><li>模块(module)</li></ul><p>Drupal模块是扩展Drupal系统功能的软件集合。模块可以分为以下三类:</p><p>核心模块:核心模块是包含在Drupal的发布版本中，不需要下载其它的组件就可以开启或关闭它们，如Blog、Book、Taxonomy等。</p><p>贡献模块:贡献模块是由Drupal的模块开发者开发的模块，它们被提交到Drupal官网统一管理，并可以通过Drupal站点模块管理界面进行在线安装，如Pathauto、Metatag、Rule等等。</p><p>自定义模块:自定义模块是指你自已开发的模块。这需要你深入理解Drupal、熟悉PHP编程、掌握Drupal API等等。</p><ul><li>区域与区块(block)</li></ul><p>Drupal站点的页面由区域构成。核心主题Bartik包含header,footer,sidebars,featured top,featured bottom,main content等等区域。你可以通过主题定义区域。区块用来在网站页面的区域中显示内容，它可以是HTML代码，也可以是文章列表，或者你定义的其它信息。</p><ul><li>菜单(menu)</li></ul><p>Drupal使用菜单来导航网站，方便用户访问内容。如页面头部显示网站主导航菜单，站点创建者可以对主导航菜单进行配置。又比如用户菜单用来查看用户资料或退出网站。你可以自己创建菜单并显示它们，也可以创建文章时为它们指定一个菜单等。</p><ul><li>主题(theme)</li></ul><p>Drupal的主题层与数据层、模块层是相分离的，主题层决定站点的外观，控制图像样式，菜单显示，网站页面布局，网站配色等。主题包含模板文件与资源文件，模板文件将HTML标签、CSS类、内容等组织在一起，CSS文件控制页面内容如何显示。</p><ul><li>视图(view)</li></ul><p>视图是一个创建动态页面的强大工具，Drupal 8 已经将视图模块集成到内核中。用户可以使用视图工具创建页面、区块、RSS等。比如我们想将最新内容显示在网站主页的某一位置上，就可以利用视图创建这一区块，然后在相应区域中开启就行了。</p><ul><li>数据库(database)</li></ul><p>Drupal将数据存入数据库中。在数据库中，每一种信息都有相应的数据表，例如节点信息有节点表，每一种字段存储数据在它们自己的表中，这些表由Drupal自动创建。评论、用户、角色、权限等也有相应的数据表。一般来说Drupal使用MySQL数据库，但它也支持其它数据库如PostgreSQL、SQLite等。</p><ul><li>URL路径</li></ul><p>Drupal站点的URL路径是指站点的基本URL后的部份，如<a href="http://example.com/node/1，Drupal路径是node/1。当你访问Drupal站点时，Drupal根据路径寻找需要返回给访客的信息，Drupal会检测路由信息或菜单项以找到定义这个路径的模块，然后交由模块响应。正如上例，定义路径的是node模块，Drupal会让节点模块决定如何处理这一路径。" target="_blank" rel="noopener">http://example.com/node/1，Drupal路径是node/1。当你访问Drupal站点时，Drupal根据路径寻找需要返回给访客的信息，Drupal会检测路由信息或菜单项以找到定义这个路径的模块，然后交由模块响应。正如上例，定义路径的是node模块，Drupal会让节点模块决定如何处理这一路径。</a></p><ul><li>Bootstrap</li></ul><p>Bootstrap是Drupal系统的CPU(中央处理器)，主要用来处理请求。</p><ul><li>权限(permission)</li></ul><p>Drupal拥有强大的权限系统，通过配置用户权限规定用户能做什么、不能做什么。权限系统按照用户角色(用户组)进行分配，具有相同权限的用户就是一个用户组。模块可以定义权限，以规定哪些用户可以使用这一项功能。</p>]]></content>
    
    
    <categories>
      
      <category>drupal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cms</tag>
      
      <tag>php</tag>
      
      <tag>drupal8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/05/21/hello-world/"/>
    <url>/2020/05/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装部署Drupal</title>
    <link href="/2020/05/19/Docker%20%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%20Drupal/"/>
    <url>/2020/05/19/Docker%20%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%20Drupal/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker安装部署Drupal"><a href="#Docker安装部署Drupal" class="headerlink" title="Docker安装部署Drupal"></a>Docker安装部署Drupal</h3><hr><h4 id="需要的环境"><a href="#需要的环境" class="headerlink" title="需要的环境"></a>需要的环境</h4><ul><li>docker</li><li>docker-compose</li></ul><hr><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>Docker</li></ul><blockquote><p>什么是Docker</p></blockquote><p>docker允许你将你的应用和它依赖的环境打包到一个叫做容器的标准单元内。</p><p>你的应用，比如说druapl网站，这个应用依赖于web服务器（nginx/apache）和数据库（mysql/mariadb/postgresql）。</p><p>通常来说，如果你想要基于现有的网站重新部署一个新的网站副本，你需要通过操作系统的包管理器比如apt-get或者yum来手动部署依赖并且配置环境，安装扩展等等，这些都是很繁琐很复杂的过程。</p><p>当然，你也可以使用一些譬如Puppet, Ansible, Salt, Chef等编排工具来自动化你的安装和配置过程。</p><p>或者你也能可以使用完全不一样的方法：容器虚拟化Docker。通过使用docker，你可以打包你的应用到容器里面，并且可以部署在几乎所有的机器上，你可以把应用部署在你的手提电脑上，或者生产服务器上，或者你个人的vps上，甚至在vagrant里面。<br>  Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。</p><p><img src="/img/2020-05-19/this_is_docker.png" srcset="/img/loading.gif" alt="容器让你从细节中抽象出来"></p><p>  一个完整的Docker有以下几个部分组成：</p><ol><li>DockerClient客户端</li><li>Docker Daemon守护进程</li><li>Docker Image镜像</li><li>DockerContainer容器</li></ol><hr><ul><li><p>Drupal</p><p>Drupal是一套开源的内容管理平台，是一个基于PHP语言编写的开发型CMF（内容管理框架），拥有多种功能，可以用来建设从个人网站到大型社区网站。Drupal的架构由三大部分组成：内核、模块、主题。三者通过Hook机制紧密的联系起来。</p><p>Drupal包括以下的功能：</p><ul><li>Blog</li><li>协同写作平台</li><li>论坛</li><li>电子报</li><li>相册</li><li>文件的上传与下载</li><li>全文搜索</li><li>多角色权限管理</li><li>模块化</li><li>主题引擎</li><li>多语言支持</li></ul></li></ul><blockquote><p>6个理由使用docker部署drupal</p></blockquote><ol><li>托管无关</li></ol><p>万一你想要把网站迁移到其他的主机提供商，使用docker的话就很容易做到，因为你的网站都是一些容器集合，而这些容器可以运行在各种机器上面。</p><ol start="2"><li>克隆 </li></ol><p>如果你想要启动一个新的环境，例如开发环境或者测试环境，那么使用docker很容易实现，你只需要使用同一个镜像启动另外的容器就行了。</p><ol start="3"><li>环境一致</li></ol><p>我们都知道这么一类问题，你在开发环境中不能重现某一些神秘的bug，最终发现是因为缺失某一些扩展或者扩展的版本不一致导致的。如果使用docker的话，诸如此类的环境问题就不存在了。</p><ol start="4"><li>隔离</li></ol><p>如果你有多个网站或者一个网站的多个实例部署在同一台服务器的花，那么将它们隔离是非常重要的。你也不想因为其中一个应用的高负载影响到其他的应用。尽管隔离的实现比较棘手，但是docker的容器之间是相互隔离的。</p><ol start="5"><li>优化基础设施</li></ol><p>毫无疑问的是我们通过配置nginx，php，mysql来优化我们的应用性能，如果你不擅长这些，那么你能够从docker hub中获取别人已经制作好的容器镜像。</p><ol start="6"><li>可扩展 </li></ol><p>每个容器都可以被纵向扩展，比如增加更多的资源，也可以被横向扩展，比如克隆更多的容器和使用负载均衡。</p><hr><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p><img src="/img/2020-05-19/drupal_project.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><pre><code class="hljs angular2">DockerProject├── .env├── docker-compose.yml└── drupal    ├── drupal-install.sh    ├── mysql    ├── nginx.conf        └── drupal.test.conf    └── web</code></pre><ul><li>创建指定项目目录 DrupalProject</li><li>在 DrupalProject 下新建 .env docker-compose.yml <strong>文件</strong> 及 drupal <strong>文件夹</strong></li><li>在 drupal 下新建  drupal-install.sh <strong>文件</strong> 及 mysql nginx.conf web <strong>文件夹</strong></li><li>在 nginx.conf 下新建 drupal.test.conf【根据域名自定义以.conf结尾文件名文件】</li></ul><h4 id="下载drupal8安装文件"><a href="#下载drupal8安装文件" class="headerlink" title="下载drupal8安装文件"></a>下载drupal8安装文件</h4><p>基于Docker-compose正常情况下上面的drupal8 container会下载安装文件并放到对应的文件夹里，但是有时候会下载出错或者并没有下载文件，所以创建我们可以手动下载drupal并放到对应的目录下。<br>大家可以到<a href="https://www.drupal.org/download" target="_blank" rel="noopener">Drupal官网</a>下载，也可以通过执行下面到文件下载。</p><blockquote><p>创建 drupal-install.sh 文件</p></blockquote><pre><code class="hljs plain"># drupal-install.sh#! &#x2F;bin&#x2F;bash[[ -f .env ]] &amp;&amp; source .envif [ $DRUPAL_VERSION ]then     echo &quot;Start with Drupal version $&#123;DRUPAL_VERSION&#125;&quot;else    echo &quot;Drupal version is not defined. Set the default version to 8.6.12&quot;    DRUPAL_VERSION&#x3D;&#39;8.6.12&#39;fimkdir webcurl -fSL &quot;https:&#x2F;&#x2F;ftp.drupal.org&#x2F;files&#x2F;projects&#x2F;drupal-$&#123;DRUPAL_VERSION&#125;.tar.gz&quot; -o drupal.tar.gzmv drupal.tar.gz webcd webtar -zx --strip-components&#x3D;1 -f drupal.tar.gzrm drupal.tar.gz</code></pre><blockquote><p>执行上面的文件 ，下载drupal</p></blockquote><pre><code class="hljs $xslt">sh drupal-install.sh</code></pre><h4 id="创建docker-compose-yml配置文件"><a href="#创建docker-compose-yml配置文件" class="headerlink" title="创建docker-compose.yml配置文件"></a>创建docker-compose.yml配置文件</h4><pre><code class="hljs plain"># docker-compose.ymlversion: &quot;3&quot;services:  web:    image: nginx:$NGINX_TAG    container_name: &quot;$&#123;PROJECT_NAME&#125;_nginx&quot;    ports:      - $NGINX_PORT    volumes:      - &quot;.&#x2F;drupal&#x2F;web:&#x2F;var&#x2F;www&#x2F;html&quot;      - &quot;.&#x2F;drupal&#x2F;nginx.conf&#x2F;drupal.test.conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf&quot;        depends_on:      - php     networks:      drupal-net:        ipv4_address: 192.158.0.4  php:    image: drupal:$DRUPAL_TAG    container_name: &quot;$&#123;PROJECT_NAME&#125;_drupal&quot;    volumes:      - &quot;.&#x2F;drupal&#x2F;web:&#x2F;var&#x2F;www&#x2F;html&quot;    restart: always    privileged: true     depends_on:      - mysql    networks:      drupal-net:        ipv4_address: 192.158.0.3  mysql:    image: mysql:$MYSQL_TAG    container_name: &quot;$&#123;PROJECT_NAME&#125;_mysql&quot;    command: mysqld --default-authentication-plugin&#x3D;mysql_native_password    environment:      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD      MYSQL_USER: $DB_USER      MYSQL_PASSWORD: $DB_PASSWORD      MYSQL_DATABASE: $DB_NAME    volumes:      - &quot;.&#x2F;drupal&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql&quot;    ports:      - $DB_PORT    restart: always    networks:      drupal-net:        ipv4_address: 192.158.0.2      networks:  drupal-net:    ipam:      config:        - subnet: 192.158.0.0&#x2F;16</code></pre><h4 id="创建-env文件"><a href="#创建-env文件" class="headerlink" title="创建.env文件"></a>创建.env文件</h4><pre><code class="hljs $xslt"># .envPROJECT_NAME&#x3D;drupal8DRUPAL_VERSION&#x3D;8.8.3DRUPAL_TAG&#x3D;latestNGINX_TAG&#x3D;alpineNGINX_PORT&#x3D;80:80###  database ###MYSQL_TAG&#x3D;8DB_NAME&#x3D;drupalDB_USER&#x3D;adminDB_PASSWORD&#x3D;adminDB_ROOT_PASSWORD&#x3D;rootDB_PORT&#x3D;33060:3306</code></pre><h4 id="创建-drupal-test-conf-【nginx】配置文件"><a href="#创建-drupal-test-conf-【nginx】配置文件" class="headerlink" title="创建 drupal.test.conf 【nginx】配置文件"></a>创建 drupal.test.conf 【nginx】配置文件</h4><pre><code class="hljs plain">upstream drupal_php&#123;    server 192.158.0.3:80;    #server 192.158.0.5:80;    #server 192.158.0.6:80;&#125;server &#123;    listen       80;    server_name  drupal.test;location &#x2F; &#123;    proxy_set_header Host $host;        proxy_pass http:&#x2F;&#x2F;drupal_php&#x2F;;    &#125;&#125;</code></pre><h4 id="容器服务命令-在DrupalProject目录下执行"><a href="#容器服务命令-在DrupalProject目录下执行" class="headerlink" title="容器服务命令 [在DrupalProject目录下执行]"></a>容器服务命令 [在DrupalProject目录下执行]</h4><blockquote><p>启动容器</p></blockquote><pre><code class="hljs plain">docker-compose up -d</code></pre><p>容器启动以后，便可使用 drupal.test 【nginx配置域名及端口】 成功访问！</p><blockquote><p>停止容器</p></blockquote><pre><code class="hljs plain">docker-compose stop</code></pre><blockquote><p>删除容器</p></blockquote><pre><code class="hljs plain">docker-compose rm</code></pre><hr><h3 id="Drupal安装"><a href="#Drupal安装" class="headerlink" title="Drupal安装"></a>Drupal安装</h3><blockquote><p>访问域名 drupal.test 跳转至安装页面</p></blockquote><p><img src="/img/2020-05-20/drupal_install_1.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>安装语言 选择 English ,选择中国将会出现以下（图）错误提示</p></blockquote><p><img src="/img/2020-05-20/drupal_install_q_1.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>基于标准（Standard）/极简(Minimal)/案例(Demo) 选择安装</p></blockquote><p><img src="/img/2020-05-20/drupal_install_2.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>数据库配置，基于 .env 文件配置 </p></blockquote><pre><code class="hljs plain">* 数据库名 【Database name】  &#x3D;&gt; drupal* 数据库用户名 【Database username】  &#x3D;&gt; admin* 数据库密码 【Database password】  &#x3D;&gt; admin</code></pre><pre><code class="hljs plain">* 数据库访问地址 【Host】  &#x3D;&gt; 192.158.0.2 * 数据库访问端口 【Port number】  &#x3D;&gt; 3306* 数据库表前缀  【Table name prefix】 &#x3D;&gt; （可留空）</code></pre><p><img src="/img/2020-05-20/drupal_install_3.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>站点信息配置</p></blockquote><ul><li>Site name 【站点名称】</li><li>Site email address 【站点邮箱地址】</li><li>Username 【管理员用户名】</li><li>Password 【管理员用户密码】</li><li>Confirm password 【确认管理员用户密码】</li><li>Email address 【管理员邮箱地址】</li><li>Default country 【默认国家】</li><li>Default time zone 【默认时区】</li></ul><p><img src="/img/2020-05-20/drupal_install_4.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>Drupal安装完成！<br><img src="/img/2020-05-20/drupal_install_5.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>drupal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cms</tag>
      
      <tag>php</tag>
      
      <tag>drupal8</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
