<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Drupal8 主题介绍和开发</title>
    <link href="/2020/05/21/Drupal8%20%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%BC%80%E5%8F%91/"/>
    <url>/2020/05/21/Drupal8%20%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="Drupal8-主题介绍"><a href="#Drupal8-主题介绍" class="headerlink" title="Drupal8 主题介绍"></a>Drupal8 主题介绍</h2><p>主题是定义视图层的文件的集合。您还可以在一个主题上创建一个或多个“子主题”或变体。需要配置 <strong>主题名.info.yml</strong> 文件。</p><h3 id="主题工作流程"><a href="#主题工作流程" class="headerlink" title="主题工作流程"></a>主题工作流程</h3><p><img src="/img/2020-05-20/drupal_theming.jpg" srcset="/img/loading.gif" alt="Drupal8主题工作流程"></p><h3 id="主题位置"><a href="#主题位置" class="headerlink" title="主题位置"></a>主题位置</h3><p><strong>必须将主题放置在Drupal项目目录下的“themes”文件夹中</strong>,Drupal核心主题（例如Bartik和Seven）位于Drupal项目目录下的<strong>core / themes</strong>文件夹中。</p><ul><li><p>官方推荐<br>将贡献的主题（第三方主题）放在名为 <strong>“ contrib”</strong> 的子文件夹中，而将自己的主题放在名为 <strong>“ custom”</strong> 的文件夹中。</p><p>每个单独的主题都包含在以主题本身命名的目录中。例如 ** fluffiness/**。名称必须全部小写，以字母开头，并使用下划线（_）代替空格。</p></li><li><p>Drupal安装的（部分）结构如下所示：</p></li></ul><pre><code class="hljs plain">|-core|  |-modules|  |-themes|  |  |-bartik|  |  |-seven..|-modules|-themes|  |-contrib|  |  |-zen|  |  |-basic|  |  |-bluemarine|  |-custom|  |  |-fluffiness</code></pre><h3 id="主题文件夹结构"><a href="#主题文件夹结构" class="headerlink" title="主题文件夹结构"></a>主题文件夹结构</h3><p>典型主题文件夹结构中找到的文件和文件夹的示例：</p><pre><code class="hljs plain">fluffiness  |-fluffiness.breakpoints.yml  |-fluffiness.info.yml  |-fluffiness.libraries.yml  |-fluffiness.theme  |-config  |  |-install  |  |  |-fluffiness.settings.yml  |  |-schema  |  |  |-fluffiness.schema.yml  |-css  |  |-style.css  |-js  |  |-fluffiness.js  |-images  |  |-buttons.png  |-logo.svg  |-screenshot.png  |-templates  |  |-maintenance-page.html.twig  |  |-node.html.twig</code></pre><h3 id="常见主题文件的描述（-代表主题名）"><a href="#常见主题文件的描述（-代表主题名）" class="headerlink" title="常见主题文件的描述（*代表主题名）"></a>常见主题文件的描述（*代表主题名）</h3><blockquote><p>*.info.yml<br>主题必须包含 *.info.yml文件才能定义主题。 *.info.yml文件尤其定义了元数据，库和块区域。这是主题中唯一需要的文件。</p></blockquote><blockquote><p>*.libraries.yml<br>该 *.libraries.yml文件是用来定义JavaScript和CSS库，可以通过主题加载。</p></blockquote><blockquote><p>*.breakpoints.yml<br>断点定义了响应式设计需要更改的位置，以响应不同的设备。断点在 *.breakpoints.yml文件中定义。</p></blockquote><blockquote><p>*.theme<br>*.theme文件是一个PHP文件，其中包含输出的所有条件逻辑和数据（预处理）。它还可以扩展基本主题设置。创建高级主题设置。</p></blockquote><blockquote><p>CSS/<br>最好将.css文件存储在“ css”子文件夹中。Drupal 8核心主题遵循<a href="https://www.kancloud.cn/avalons/rsys/520693" target="_blank" rel="noopener">SMACSS</a>样式指南来组织CSS文件。要使主题加载CSS文件，必须在 *.libraries.yml文件中定义它们，并且可以在 *.info.yml文件中覆盖或删除它们。</p></blockquote><blockquote><p>js /<br>特定于主题的JavaScript文件存储在“ js”文件夹中。要使主题加载JavaScript文件，必须在 *.libraries.yml文件中定义它们。</p></blockquote><blockquote><p>images/<br>优良作法是将图像存储在“images”子文件夹中。</p></blockquote><blockquote><p>screenshot.png<br>如果在主题文件夹中找到screenshot.png文件，那么它将在“外观”页面上使用。或者，您可以在 *.info.yml文件中定义屏幕截图。</p></blockquote><blockquote><p>logo.svg<br>如果在主题文件夹中找到了主题徽标的SVG矢量文件，则可以在网站标题中使用它。徽标也可以在上载。Appearance &gt; Settings</p></blockquote><blockquote><p>templates/<br>模板提供HTML标记和一些表示逻辑。与Drupal 7相反，在Drupal 8中，模板文件（*.html.twig文件）必须存储在“ templates”子文件夹中。如果遵循特定的命名约定，则Drupal将用您提供的模板替换默认的核心模板，从而允许您覆盖默认的标记。您还可以在子文件夹中组织模板，例如，”templates/block” 中的所有块模板以及”templates/views”中的所有视图模板。</p></blockquote><h3 id="核心主题Bartik文件夹结构"><a href="#核心主题Bartik文件夹结构" class="headerlink" title="核心主题Bartik文件夹结构"></a>核心主题Bartik文件夹结构</h3><pre><code class="hljs plain">bartik  |-bartik.breakpoints.yml  |-bartik.info.yml  |-bartik.libraries.yml  |-bartik.theme  |-color  |  |-color.inc  |  |-preview.css  |  |-preview.html  |  |-preview.js  |-config  |  |-schema  |  |  |-bartik.schema.yml  |-css  |  |-colors.css  |  |-layout.css  |  |-maintenance-page.css  |  |-print.css  |-images  |  |-add.png  |  |-required.svg  |  |-tabs-border.png  |-logo.svg  |-screenshot.png  |-templates  |  |-block--search-form-block.html.twig  |  |-block--system-branding-block.html.twig  |  |-block--system-menu-block.html.twig  |  |-block.html.twig  |  |-comment.html.twig  |  |-field--taxonomy-term-reference.html.twig  |  |-maintenance-page.html.twig  |  |-node.html.twig  |  |-page.html.twig  |  |-status-messages.html.twig</code></pre><hr><h2 id="Drupal8-主题开发"><a href="#Drupal8-主题开发" class="headerlink" title="Drupal8 主题开发"></a>Drupal8 主题开发</h2><h3 id="使用-主题名-info-yml-文件定义主题"><a href="#使用-主题名-info-yml-文件定义主题" class="headerlink" title="使用 主题名.info.yml 文件定义主题"></a>使用 主题名.info.yml 文件定义主题</h3><p>要创建Drupal 8主题，您需要首先创建一个 <strong>主题名.info.yml</strong>文件，该文件向Drupal提供有关您主题设计的元数据。注意，将文件中的类型(“ type”)设置为“ theme”。</p><h4 id="创建一个-主题名-info-yml-文件"><a href="#创建一个-主题名-info-yml-文件" class="headerlink" title="创建一个 主题名.info.yml 文件"></a>创建一个 主题名.info.yml 文件</h4><p>在<a href="https://www.drupal.org/node/2349803" target="_blank" rel="noopener">主题文件夹</a>的根目录中创建 <strong>主题名.info.yml</strong> 文件。该文件夹应与 <strong>.info.yml</strong> 文件具有相同的名称。</p><p><strong>注意：</strong> <a href="https://symfony.com/doc/current/components/yaml/yaml_format.html" target="_blank" rel="noopener">YAML文件结构</a>写作规范</p><blockquote><p>案例</p></blockquote><pre><code class="hljs plain">name: Fluffinesstype: themedescription: &#39;A cuddly theme that offers extra fluffiness.&#39;core: 8.xlibraries:  - fluffiness&#x2F;global-stylingbase theme: classyregions:  header: Header  content: Content  sidebar_first: &#39;Sidebar first&#39;  footer: Footer</code></pre><blockquote><p>键值对</p></blockquote><ul><li>name (名称（必填）)<br>易读的名称。这将显示在激活主题的“外观”页面上。<pre><code class="hljs plain">name: Fluffiness</code></pre></li><li>type (类型（必填）)<br>指示扩展名的类型，即“module”，“theme”或“profile”。对于主题，应始终将其设置为“theme”。此值区分大小写。<pre><code class="hljs plain">type: theme</code></pre></li><li>description (说明（可选）)<br>描述，显示在“外观”页面上。<pre><code class="hljs plain">description: 一个有灰色和蓝色两种额外可爱的Drupal主题.</code></pre></li><li>package (包装（可选）)<br>指定一个“包”，使您可以将主题分组在一起。<pre><code class="hljs plain">package: Core</code></pre></li><li>core (核心（必填）)<br>指定主题兼容的Drupal核心的版本。<pre><code class="hljs plain">core: 8.x</code></pre></li><li>php (php （可选）)<br>所需的最低PHP版本。默认为DRUPAL_MINIMUM_PHP常量值。<pre><code class="hljs plain">php: 5.5.9</code></pre></li><li>version (版本（可选）)<br>指定版本。对于drupal.org上托管的主题，版本号将由打包脚本填写。不要手动指定它，也不要完全忽略版本行。<pre><code class="hljs plain">version: 8.x-1.0</code></pre></li><li>libraries (库（可选）)<br>要添加到主题处于活动状态的所有页面的列表库（可以包含CSS和JavaScript加载资源）【<a href="https://www.drupal.org/node/2216195" target="_blank" rel="noopener">阅读有关主题和资产库的更多信息</a>】<pre><code class="hljs plain">libraries:  - fluffiness&#x2F;global-styling</code></pre></li><li>libraries-override (覆盖库（可选）)<br>要覆盖的库和资源的集合。【<a href="https://www.drupal.org/node/2216195#override-extend" target="_blank" rel="noopener">在覆盖和扩展库中阅读更多内容</a>】。<pre><code class="hljs plain">libraries-override:  contextual&#x2F;drupal.contextual-links:    css:      component:        &#x2F;core&#x2F;themes&#x2F;stable&#x2F;css&#x2F;contextual&#x2F;contextual.module.css: false</code></pre></li><li>libraries-extend (扩展库（可选）)<br>可在附加库添加的库和资源集合。【<a href="https://www.drupal.org/node/2216195#override-extend" target="_blank" rel="noopener">在覆盖和扩展库中阅读更多内容</a>】。<pre><code class="hljs plain">libraries-extend:  core&#x2F;drupal.user:     - classy&#x2F;user1    - classy&#x2F;user2</code></pre></li><li>base theme (基本主题（推荐）)<br>通过将主题指定为基本主题，主题可以从另一个主题继承资源。–它能让你的主题在继承核心主题时，主题修改更容易。<pre><code class="hljs plain">base theme: classy</code></pre></li><li>hidden (隐藏（可选）)<br>指是否从“外观”页面隐藏主题，以便无法通过UI启用/禁用主题。<pre><code class="hljs plain">hidden: true</code></pre></li><li>engine (引擎（可选）)<br>主题引擎. 默认为”twig”.<pre><code class="hljs plain">engine: twig</code></pre></li><li>logo (品牌图标（可选）)<br><strong>在8.6.x中引入</strong><br>品牌图标相对于主题文件的路径。默认情况下，Drupal将在主题文件夹的根目录中查找名为“ logo.svg”的文件，并将其用作主题的品牌图标<pre><code class="hljs plain">logo: images&#x2F;logo.png</code></pre></li><li>screenshot (主题展示缩略图（可选）)<br>主题展示缩略图相对于主题文件的路径。主题展示缩略图应以宽588像素和高438像素的格式显示。默认情况下，Drupal将在主题文件夹的根目录中查找名为“ screenshot.png”的文件，并将其用作“外观”页面上的主题图像。 <pre><code class="hljs plain">screenshot: fluffiness.png</code></pre></li><li>regions (区域（可选）)<br>主题区域列表。（请注意，区域键前面没有破折号。）content需要一个区域。<a href="https://www.drupal.org/node/2469113" target="_blank" rel="noopener">阅读有关将区域添加到主题的更多信息</a>。<pre><code class="hljs plain">regions:  header: Header  content: Content  sidebar_first: &#39;First sidebar&#39;</code></pre></li><li>regions_hidden (区域隐藏 （可选）)<br>要删除的继承区域列表。<pre><code class="hljs plain">regions_hidden:  - sidebar_last</code></pre></li><li>features (功能（可选）)<br>要在主题“设置”页面上显示的功能列表。<pre><code class="hljs plain">features:  - comment_user_verification  - comment_user_picture  - favicon  - logo  - node_user_picture</code></pre></li><li>stylesheets-remove (样式表删除（不建议使用）)<br>其他模块或主题的样式表列表，可从处于活动状态的所有页面中删除。每个值都必须是相对于docroot的完整路径，以在存在多个同名文件时解决歧义。如果文件是属于模块或主题的库的一部分，@module_or_theme_name则可以使用表单中的令牌代替完整路径。请注意，在使用令牌时，必须用引号将其引号，因为“ @”是YAML中的保留指示符。</li><li><em>注意：*</em>该密钥已被弃用，并将在Drupal 9中删除。在大多数情况下，应使用<pre><code class="hljs plain">stylesheets-remove:  - core&#x2F;assets&#x2F;vendor&#x2F;normalize-css&#x2F;normalize.css  - &#39;@classy&#x2F;css&#x2F;components&#x2F;tabs.css&#39;</code></pre></li><li>ckeditor_stylesheets (编辑器样式表 （可选）)<br>要添加到CKEditor框架的样式表列表。<pre><code class="hljs plain">ckeditor_stylesheets:  - https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css?family&#x3D;Open+Sans  - css&#x2F;base&#x2F;elements.css</code></pre></li></ul><h3 id="主题添加区域"><a href="#主题添加区域" class="headerlink" title="主题添加区域"></a>主题添加区域</h3><ul><li>将区域元数据添加到 <strong>主题名.info.yml</strong> 文件。</li><li>在新添加的主题中添加并编辑 <strong>page.html.twig</strong> 文件。</li></ul><p><strong>注意：</strong> 如果您在主题中声明了任何区域，甚至仅声明了一个，所有默认区域都将不再应用，你需要声明将要使用的所有区域。  </p><h4 id="将区域添加到-主题名-info-yml-文件"><a href="#将区域添加到-主题名-info-yml-文件" class="headerlink" title="将区域添加到 主题名.info.yml 文件"></a>将区域添加到 <strong>主题名.info.yml</strong> 文件</h4><p>首先在 <strong>主题名.info.yml</strong>文件中声明所有新区域。regions像这样将区域声明为键的子级(域键应为字母数字，并可以包含下划线（_）)：</p><pre><code class="hljs plain">regions:  header: &#39;Header&#39;  content: &#39;Content&#39;  footer: &#39;Footer&#39;</code></pre><h4 id="将区域添加到模板"><a href="#将区域添加到模板" class="headerlink" title="将区域添加到模板"></a>将区域添加到模板</h4><p>为了使区域显示放置在其中的任何内容，您需要确保新区域也已添加到 <strong>主题名.info.yml</strong>文件中。区域将表示为Twig变量，其名称与 <strong>主题名.info.yml</strong>文件中使用的键相对应.</p><blockquote><p>例子</p></blockquote><pre><code class="hljs plain">header: &#39;Header&#39;</code></pre><blockquote><p>…会变成：</p></blockquote><pre><code class="hljs plain">&#123;&#123; page.header &#125;&#125;</code></pre><p>它们的行为与任何其他Twig变量一样，并且可以包装在对您的用例有意义的任何标记中。</p><ul><li>默认区域</li></ul><p>有关默认区域的列表，请查阅<a href="https://api.drupal.org/api/drupal/core%21modules%21system%21templates%21page.html.twig/8.2.x" target="_blank" rel="noopener">page.html.twig文档</a>。</p><ol><li>page.header</li><li>page.primary_menu</li><li>page.secondary_menu</li><li>page.highlighted</li><li>page.help (动态帮助文本，主要用于管理页面)</li><li>page.content (当前页面的主要内容)</li><li>page.sidebar_first</li><li>page.sidebar_second</li><li>page.footer</li><li>page.breadcrumb</li></ol><p><strong>如果您的主题未声明任何区域，Drupal将采用这组默认值。</strong></p><h3 id="Drupal主题添加样式表（CSS）和JavaScript（JS）"><a href="#Drupal主题添加样式表（CSS）和JavaScript（JS）" class="headerlink" title="Drupal主题添加样式表（CSS）和JavaScript（JS）"></a>Drupal主题添加样式表（CSS）和JavaScript（JS）</h3><p>Drupal使用高级原则：仅当您告诉Drupal应该加载资产时，才加载资产（CSS或JS）。Drupal不会在每个页面上加载所有资产，因为它会降低前端性能。</p><ul><li>加载CSS或JS资源过程：</li></ul><ol><li>使用正确的命名约定和文件结构将CSS或JS保存到文件中。</li><li>定义一个“库”，主题注册这些CSS / JS文件。</li><li>通过预处理功能中的render元素将库“附加” 到所有页面，特定的Twig模板或目标特定的页面。</li></ol><ul><li>定义库</li></ul><p>定义一个与主题名同名的 <strong>主题名.libraries.yml</strong> 文件，文件中的每一个条目都描述一个资源文件，如下所示：</p><pre><code class="hljs plain"># fluffiness.libraries.ymlcuddly-slider:  version: 1.x  css:    theme:      css&#x2F;cuddly-slider.css: &#123;&#125;  js:    js&#x2F;cuddly-slider.js: &#123;&#125;</code></pre><ul><li>声明依赖</li></ul><p>要声明依赖关系，所需的库以resource / library的形式声明。对于核心库，资源是core，对于其他库，资源是模块名称或主题名称。所以，如果  new_library依赖于jQuery的核心，  my_library中声明my_theme，并my_library宣布my_module，你会声明依赖关系：</p><pre><code class="hljs plain"># fluffiness.libraries.ymlnew_library:  js:    js&#x2F;new_libary.js: &#123;&#125;  dependencies:    - core&#x2F;jquery    - my_module&#x2F;my_library    - my_theme&#x2F;my_library</code></pre><ul><li>声明全局库文件</li></ul><p>大多数主题使用一些全局样式资源库，需要在激活该主题的每个页面上加载的样式表（CSS文件）。一些全局js 资源库也是一样，需要在激活该主题的每个页面上加载js资源库。</p><pre><code class="hljs plain"># fluffiness.libraries.yml (multiple libraries can be added to a libraries.yml file, these would appear below the cuddly-slider libraries added earlier)global-styling:  version: 1.x  css:    theme:      css&#x2F;layout.css: &#123;&#125;      css&#x2F;style.css: &#123;&#125;      css&#x2F;colors.css: &#123;&#125;global-scripts:  version: 1.x  js:     js&#x2F;navmenu.js: &#123;&#125;</code></pre><p>将global-style / global-scripts库添加到 <strong>主题名.libraries.yml</strong> 文件libraries中：</p><pre><code class="hljs plain">#fluffiness.info.ymlname: Fluffinesstype: themedescription: &#39;A cuddly theme that offers extra fluffiness.&#39;core: 8.x# by adding global-styling and global-scripts here, the css&#x2F;js files in the library become # available to every page presented by the themelibraries:  - fluffiness&#x2F;global-styling  - fluffiness&#x2F;global-scriptsbase theme: classyregions:  header: Header  content: Content  sidebar_first: &#39;Sidebar first&#39;  footer: Footer</code></pre><h4 id="定义库：选项和详细信息"><a href="#定义库：选项和详细信息" class="headerlink" title="定义库：选项和详细信息"></a>定义库：选项和详细信息</h4><p>以下属性是可选的，并且按CSS资产应用。</p><blockquote><p>CSS相关属性</p></blockquote><table><thead><tr><th>属性名</th><th>描述</th><th>参数</th></tr></thead><tbody><tr><td>attributes</td><td>可选属性。已知用例引导CDN。</td><td>{ attributes: { crossorigin: anonymous } }</td></tr><tr><td>browsers</td><td>基于浏览器有条件地加载资源。<br> 注意，这个方法使用了条件注释，这在IE10及以上版本中是不支持的.</td><td>{ browsers: { IE: ‘lte IE 9’, ‘!IE’: false } }</td></tr><tr><td>group</td><td>按组汇总资源。<br> 默认值:资产所在的SMACSS组。</td><td>很少使用</td></tr><tr><td>media</td><td>媒体类型.</td><td>{ media: print }</td></tr><tr><td>minified</td><td>资源是否已经压缩.<br>Default: false</td><td>{ type: external, minified: true }</td></tr><tr><td>preprocess</td><td>是否应该聚合资源.<br>Default: true</td><td>{ preprocess: false }</td></tr><tr><td>type</td><td>资源的来源.<br>Default: file</td><td>{ type: external, minified: true }</td></tr><tr><td>weight</td><td>调整相对于其他资源的顺序(在同一个SMACSS组中).<br>Default: 0. Use a numeric between -50 to +50.</td><td>{ weight: 1 }</td></tr></tbody></table><blockquote><p>JS 相关属性</p></blockquote><table><thead><tr><th>属性名</th><th>描述</th><th>参数</th></tr></thead><tbody><tr><td>attributes</td><td>额外的脚本属性。</td><td>{ type: external, attributes: { async: true } }</td></tr><tr><td>browsers</td><td>基于浏览器有条件地加载资源。注意，这个方法使用了条件注释，这在IE10及以上版本中是不支持的.</td><td>{ browsers: { IE: ‘lte IE 9’, ‘!IE’: false } }</td></tr><tr><td>preprocess</td><td>是否应该聚合资源。<br>Default: true</td><td>{ preprocess: false }</td></tr><tr><td>type</td><td>资源的来源<br> Default: file</td><td>{ type: external, minified: true }</td></tr><tr><td>weight</td><td>不鼓励使用依赖项。<br>调整相对于其他资产的顺序。必须是负的</td><td>{ weight: -1 }</td></tr></tbody></table><h4 id="CDN-外部托管库"><a href="#CDN-外部托管库" class="headerlink" title="CDN /外部托管库"></a>CDN /外部托管库</h4><ul><li>例</li></ul><pre><code class="hljs plain">angular.angularjs:  remote: https:&#x2F;&#x2F;github.com&#x2F;angular  version: 1.4.4  license:    name: MIT    url: https:&#x2F;&#x2F;github.com&#x2F;angular&#x2F;angular.js&#x2F;blob&#x2F;master&#x2F;LICENSE    gpl-compatible: true  js:    https:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;angularjs&#x2F;1.4.4&#x2F;angular.min.js: &#123; type: external, minified: true &#125;</code></pre><blockquote><p>如果希望使用与请求页面相同的协议来请求外部文件，请指定相对于协议的URL：</p></blockquote><pre><code class="hljs plain">js:   &#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;angularjs&#x2F;1.4.4&#x2F;angular.min.js: &#123; type: external, minified: true &#125;</code></pre><blockquote><p>或者，如果您想添加CSS，下面是集成Font Awesome的示例：</p></blockquote><pre><code class="hljs plain">font-awesome:  remote: https:&#x2F;&#x2F;fortawesome.github.io&#x2F;Font-Awesome&#x2F;  version: 4.5.0  license:    name: MIT    url: https:&#x2F;&#x2F;fortawesome.github.io&#x2F;Font-Awesome&#x2F;license&#x2F;    gpl-compatible: true  css:    theme:      https:&#x2F;&#x2F;maxcdn.bootstrapcdn.com&#x2F;font-awesome&#x2F;4.5.0&#x2F;css&#x2F;font-awesome.min.css: &#123; type: external, minified: true &#125;</code></pre><blockquote><p>具有自定义属性的Bootstrap CDN CSS的示例。</p></blockquote><pre><code class="hljs plain">bootstrap-cdn:  remote: getbootstrap.com  version: 4.0  license:    name: MIT    url: https:&#x2F;&#x2F;github.com&#x2F;twbs&#x2F;bootstrap&#x2F;blob&#x2F;master&#x2F;LICENSE  css:    theme:      &#39;https:&#x2F;&#x2F;maxcdn.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.0.0&#x2F;css&#x2F;bootstrap.min.css&#39;:        type: external        minified: true        attributes:          crossorigin: anonymous          integrity: &quot;sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW&#x2F;dAiS6JXm&quot;</code></pre>]]></content>
    
    
    <categories>
      
      <category>drupal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cms</tag>
      
      <tag>php</tag>
      
      <tag>drupal8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Drupal8 基本介绍</title>
    <link href="/2020/05/21/Drupal8%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <url>/2020/05/21/Drupal8%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="Drupal8-基本介绍"><a href="#Drupal8-基本介绍" class="headerlink" title="Drupal8 基本介绍"></a>Drupal8 基本介绍</h3><p>Drupal是一个高度模块化的CMS，在<a href="https://www.drupal.org/docs" target="_blank" rel="noopener">drupal.org</a>上提供了数以万计的模块。使用Drupal开发网站就像搭积木一样，在社区都可以找到适合你的模块。</p><h4 id="Drupal8-主要特点"><a href="#Drupal8-主要特点" class="headerlink" title="Drupal8 主要特点"></a>Drupal8 主要特点</h4><ul><li>1）、node(节点)</li></ul><p>node是Drupal系统的核心，当你想做一个博客系统的时候，可以方便的定义标题、内容、作者等信息。如果node不能满足你的要求，你也可以写扩展。</p><p>评论(comment)也是一个Drupal的一个特色，可以在内容类型设置开启或关闭评论。</p><ul><li>2）、用户权限系统</li></ul><p>Drupal的用户权限系统设计非常精妙，可以精确到URL级别的权限。</p><ul><li>3）、区块与菜单</li></ul><p>区块与菜单用来组织内容的显示，如热点内容区块可以将点击次数最多的内容显示在页面上，区块功能非常强大，可以配置区块的显示位置，或为某一类用户显示等等。菜单用于网站的导航。</p><ul><li>4）、模块</li></ul><p>模块是为Drupal系统提供功能的程序集，Drupal内核自带一些基本的模块以实现站点的基本功能，Drupal的社区中有数以万计的模块可供选用，如e-commerce模块可以实现在线商店功能。</p><ul><li>5）、主题</li></ul><p>主题层控制网站的最终外观，它包含模板引擎、资源库(CSS、JS、图像等)。</p><h4 id="Drupal8-目录结构"><a href="#Drupal8-目录结构" class="headerlink" title="Drupal8 目录结构"></a>Drupal8 目录结构</h4><pre><code class="hljs plain">project├── autoload.php├── composer.json├── composer.lock├── core                                            &#x2F;&#x2F; Drupal8 核心代码│   ├── assets                                      &#x2F;&#x2F; Drupal8 - 所使用的各种扩展库│   ├── authorize.php│   ├── CHANGELOG.txt│   ├── composer.json│   ├── config│   ├── COPYRIGHT.txt│   ├── core.api.php│   ├── core.libraries.yml│   ├── core.link_relation_types.yml│   ├── core.services.yml│   ├── drupalci.yml│   ├── globals.api.php│   ├── includes                                   &#x2F;&#x2F; Drupal8 - 模块化的底层功能函数，如模块化系统本身│   ├── INSTALL.mysql.txt│   ├── INSTALL.pgsql.txt│   ├── install.php│   ├── INSTALL.sqlite.txt│   ├── INSTALL.txt│   ├── lib                                        &#x2F;&#x2F; Drupal8 - 各种核心类（classes）│   ├── LICENSE.txt│   ├── MAINTAINERS.txt│   ├── misc│   ├── modules                                    &#x2F;&#x2F; Drupal8 - 系统核心模块│   ├── package.json│   ├── phpcs.xml.dist│   ├── phpunit.xml.dist│   ├── profiles                                   &#x2F;&#x2F; Drupal8 - 内置安装配置文件│   ├── rebuild.php│   ├── scripts                                    &#x2F;&#x2F; Drupal8 - 开发人员可用的各种命令行脚本│   ├── tests                                      &#x2F;&#x2F; Drupal8 - 测试用相关文件│   ├── themes                                     &#x2F;&#x2F; Drupal8 - 系统核心主题│   ├── UPDATE.txt│   └── yarn.lock├── example.gitignore├── index.php├── INSTALL.txt├── LICENSE.txt├── modules                                        &#x2F;&#x2F; Drupal8 - 贡献模块与自定义模块存放位置│   └── README.txt├── profiles│   └── README.txt├── README.txt├── robots.txt├── sites                                          &#x2F;&#x2F; Drupal8 - 在多站点情况下，放置 [default|all|domain]&#x2F;[modules|themes|files]│   ├── default│   ├── development.services.yml│   ├── example.settings.local.php│   ├── example.sites.php│   └── README.txt├── themes                                         &#x2F;&#x2F; Drupal8 - 贡献主题或自定义主题│   └── README.txt├── update.php└── web.config└── vendor                                         &#x2F;&#x2F; Drupal8 - 核心所需要的第三方库，如 Symfony2, Twig 等</code></pre><h4 id="基本术语介绍"><a href="#基本术语介绍" class="headerlink" title="基本术语介绍"></a>基本术语介绍</h4><ul><li>节点(node)</li></ul><p>根据不同的节点类型附加不同的字段，这就是内容类型。例如’base page’类型包含标题、主体字段。还有许多内容类型如文章、书页、讨论主题、博客页等。</p><ul><li>实体类型(entity)</li></ul><p>实体类型是包含一组字段的抽象概念。实体用于存储和显示数据，节点内容、评论、分类、用户等都是实体，模块可以自定义实体类型。</p><ul><li>评论(comment)</li></ul><p>评论是一种内容类型，它由Drupal核心Comment模块开启。每一条评论是用户写的一段内容，这段内容被附加到评论的节点。例如论坛中的评论被附加到特定的话题。</p><ul><li>分类(taxonomy)</li></ul><p>Drupal系统使用taxonomy来对内容进行分类。它是由Drupal的核心模块Taxonomy提供。你可以定义词汇并在词汇下添加术语。每一个词汇能附加到一个或多个内容类型，节点内容使用分类、标签等进行分组。</p><ul><li>用户(user)</li></ul><p>这里的用户是指访问你站点的真正访问者，它是一个实体类型。一般地用户具有用户名、密码、角色、e-mail地址等属性。贡献模块也可以自定义其它的用户属性。例如你可以为用户的Twitter地址增加一个”Link”。</p><ul><li>模块(module)</li></ul><p>Drupal模块是扩展Drupal系统功能的软件集合。模块可以分为以下三类:</p><p>核心模块:核心模块是包含在Drupal的发布版本中，不需要下载其它的组件就可以开启或关闭它们，如Blog、Book、Taxonomy等。</p><p>贡献模块:贡献模块是由Drupal的模块开发者开发的模块，它们被提交到Drupal官网统一管理，并可以通过Drupal站点模块管理界面进行在线安装，如Pathauto、Metatag、Rule等等。</p><p>自定义模块:自定义模块是指你自已开发的模块。这需要你深入理解Drupal、熟悉PHP编程、掌握Drupal API等等。</p><ul><li>区域与区块(block)</li></ul><p>Drupal站点的页面由区域构成。核心主题Bartik包含header,footer,sidebars,featured top,featured bottom,main content等等区域。你可以通过主题定义区域。区块用来在网站页面的区域中显示内容，它可以是HTML代码，也可以是文章列表，或者你定义的其它信息。</p><ul><li>菜单(menu)</li></ul><p>Drupal使用菜单来导航网站，方便用户访问内容。如页面头部显示网站主导航菜单，站点创建者可以对主导航菜单进行配置。又比如用户菜单用来查看用户资料或退出网站。你可以自己创建菜单并显示它们，也可以创建文章时为它们指定一个菜单等。</p><ul><li>主题(theme)</li></ul><p>Drupal的主题层与数据层、模块层是相分离的，主题层决定站点的外观，控制图像样式，菜单显示，网站页面布局，网站配色等。主题包含模板文件与资源文件，模板文件将HTML标签、CSS类、内容等组织在一起，CSS文件控制页面内容如何显示。</p><ul><li>视图(view)</li></ul><p>视图是一个创建动态页面的强大工具，Drupal 8 已经将视图模块集成到内核中。用户可以使用视图工具创建页面、区块、RSS等。比如我们想将最新内容显示在网站主页的某一位置上，就可以利用视图创建这一区块，然后在相应区域中开启就行了。</p><ul><li>数据库(database)</li></ul><p>Drupal将数据存入数据库中。在数据库中，每一种信息都有相应的数据表，例如节点信息有节点表，每一种字段存储数据在它们自己的表中，这些表由Drupal自动创建。评论、用户、角色、权限等也有相应的数据表。一般来说Drupal使用MySQL数据库，但它也支持其它数据库如PostgreSQL、SQLite等。</p><ul><li>URL路径</li></ul><p>Drupal站点的URL路径是指站点的基本URL后的部份，如 <code>http://example.com/node/1</code>，Drupal路径是node/1。当你访问Drupal站点时，Drupal根据路径寻找需要返回给访客的信息，Drupal会检测路由信息或菜单项以找到定义这个路径的模块，然后交由模块响应。正如上例，定义路径的是node模块，Drupal会让节点模块决定如何处理这一路径。</p><ul><li>Bootstrap</li></ul><p>Bootstrap是Drupal系统的CPU(中央处理器)，主要用来处理请求。</p><ul><li>权限(permission)</li></ul><p>Drupal拥有强大的权限系统，通过配置用户权限规定用户能做什么、不能做什么。权限系统按照用户角色(用户组)进行分配，具有相同权限的用户就是一个用户组。模块可以定义权限，以规定哪些用户可以使用这一项功能。</p>]]></content>
    
    
    <categories>
      
      <category>drupal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cms</tag>
      
      <tag>php</tag>
      
      <tag>drupal8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 安装部署 Drupal</title>
    <link href="/2020/05/19/Docker%20%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%20Drupal/"/>
    <url>/2020/05/19/Docker%20%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%20Drupal/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker安装部署Drupal"><a href="#Docker安装部署Drupal" class="headerlink" title="Docker安装部署Drupal"></a>Docker安装部署Drupal</h3><hr><h4 id="需要的环境"><a href="#需要的环境" class="headerlink" title="需要的环境"></a>需要的环境</h4><ul><li>docker</li><li>docker-compose</li></ul><hr><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>Docker</li></ul><blockquote><p>什么是Docker</p></blockquote><p>docker允许你将你的应用和它依赖的环境打包到一个叫做容器的标准单元内。</p><p>你的应用，比如说druapl网站，这个应用依赖于web服务器（nginx/apache）和数据库（mysql/mariadb/postgresql）。</p><p>通常来说，如果你想要基于现有的网站重新部署一个新的网站副本，你需要通过操作系统的包管理器比如apt-get或者yum来手动部署依赖并且配置环境，安装扩展等等，这些都是很繁琐很复杂的过程。</p><p>当然，你也可以使用一些譬如Puppet, Ansible, Salt, Chef等编排工具来自动化你的安装和配置过程。</p><p>或者你也能可以使用完全不一样的方法：容器虚拟化Docker。通过使用docker，你可以打包你的应用到容器里面，并且可以部署在几乎所有的机器上，你可以把应用部署在你的手提电脑上，或者生产服务器上，或者你个人的vps上，甚至在vagrant里面。<br>  Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。</p><p><img src="/img/2020-05-19/this_is_docker.png" srcset="/img/loading.gif" alt="容器让你从细节中抽象出来"></p><p>  一个完整的Docker有以下几个部分组成：</p><ol><li>DockerClient客户端</li><li>Docker Daemon守护进程</li><li>Docker Image镜像</li><li>DockerContainer容器</li></ol><hr><ul><li><p>Drupal</p><p>Drupal是一套开源的内容管理平台，是一个基于PHP语言编写的开发型CMF（内容管理框架），拥有多种功能，可以用来建设从个人网站到大型社区网站。Drupal的架构由三大部分组成：内核、模块、主题。三者通过Hook机制紧密的联系起来。</p><p>Drupal包括以下的功能：</p><ul><li>Blog</li><li>协同写作平台</li><li>论坛</li><li>电子报</li><li>相册</li><li>文件的上传与下载</li><li>全文搜索</li><li>多角色权限管理</li><li>模块化</li><li>主题引擎</li><li>多语言支持</li></ul></li></ul><blockquote><p>6个理由使用docker部署drupal</p></blockquote><ol><li>托管无关</li></ol><p>万一你想要把网站迁移到其他的主机提供商，使用docker的话就很容易做到，因为你的网站都是一些容器集合，而这些容器可以运行在各种机器上面。</p><ol start="2"><li>克隆 </li></ol><p>如果你想要启动一个新的环境，例如开发环境或者测试环境，那么使用docker很容易实现，你只需要使用同一个镜像启动另外的容器就行了。</p><ol start="3"><li>环境一致</li></ol><p>我们都知道这么一类问题，你在开发环境中不能重现某一些神秘的bug，最终发现是因为缺失某一些扩展或者扩展的版本不一致导致的。如果使用docker的话，诸如此类的环境问题就不存在了。</p><ol start="4"><li>隔离</li></ol><p>如果你有多个网站或者一个网站的多个实例部署在同一台服务器的花，那么将它们隔离是非常重要的。你也不想因为其中一个应用的高负载影响到其他的应用。尽管隔离的实现比较棘手，但是docker的容器之间是相互隔离的。</p><ol start="5"><li>优化基础设施</li></ol><p>毫无疑问的是我们通过配置nginx，php，mysql来优化我们的应用性能，如果你不擅长这些，那么你能够从docker hub中获取别人已经制作好的容器镜像。</p><ol start="6"><li>可扩展 </li></ol><p>每个容器都可以被纵向扩展，比如增加更多的资源，也可以被横向扩展，比如克隆更多的容器和使用负载均衡。</p><hr><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p><img src="/img/2020-05-19/drupal_project.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><pre><code class="hljs plain">DockerProject├── .env├── docker-compose.yml└── drupal    ├── drupal-install.sh    ├── mysql    ├── nginx.conf        └── drupal.test.conf    └── web</code></pre><ul><li>创建指定项目目录 DrupalProject</li><li>在 DrupalProject 下新建 .env docker-compose.yml <strong>文件</strong> 及 drupal <strong>文件夹</strong></li><li>在 drupal 下新建  drupal-install.sh <strong>文件</strong> 及 mysql nginx.conf web <strong>文件夹</strong></li><li>在 nginx.conf 下新建 drupal.test.conf【根据域名自定义以.conf结尾文件名文件】</li></ul><h4 id="下载drupal8安装文件"><a href="#下载drupal8安装文件" class="headerlink" title="下载drupal8安装文件"></a>下载drupal8安装文件</h4><p>基于Docker-compose正常情况下上面的drupal8 container会下载安装文件并放到对应的文件夹里，但是有时候会下载出错或者并没有下载文件，所以创建我们可以手动下载drupal并放到对应的目录下。<br>大家可以到<a href="https://www.drupal.org/download" target="_blank" rel="noopener">Drupal官网</a>下载，也可以通过执行下面到文件下载。</p><blockquote><p>创建 drupal-install.sh 文件</p></blockquote><pre><code class="hljs plain"># drupal-install.sh#! &#x2F;bin&#x2F;bash[[ -f .env ]] &amp;&amp; source .envif [ $DRUPAL_VERSION ]then     echo &quot;Start with Drupal version $&#123;DRUPAL_VERSION&#125;&quot;else    echo &quot;Drupal version is not defined. Set the default version to 8.6.12&quot;    DRUPAL_VERSION&#x3D;&#39;8.6.12&#39;fimkdir webcurl -fSL &quot;https:&#x2F;&#x2F;ftp.drupal.org&#x2F;files&#x2F;projects&#x2F;drupal-$&#123;DRUPAL_VERSION&#125;.tar.gz&quot; -o drupal.tar.gzmv drupal.tar.gz webcd webtar -zx --strip-components&#x3D;1 -f drupal.tar.gzrm drupal.tar.gz</code></pre><blockquote><p>执行上面的文件 ，下载drupal</p></blockquote><pre><code class="hljs $xslt">sh drupal-install.sh</code></pre><h4 id="创建docker-compose-yml配置文件"><a href="#创建docker-compose-yml配置文件" class="headerlink" title="创建docker-compose.yml配置文件"></a>创建docker-compose.yml配置文件</h4><pre><code class="hljs plain"># docker-compose.ymlversion: &quot;3&quot;services:  web:    image: nginx:$NGINX_TAG    container_name: &quot;$&#123;PROJECT_NAME&#125;_nginx&quot;    ports:      - $NGINX_PORT    volumes:      - &quot;.&#x2F;drupal&#x2F;web:&#x2F;var&#x2F;www&#x2F;html&quot;      - &quot;.&#x2F;drupal&#x2F;nginx.conf&#x2F;drupal.test.conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf&quot;        depends_on:      - php     networks:      drupal-net:        ipv4_address: 192.158.0.4  php:    image: drupal:$DRUPAL_TAG    container_name: &quot;$&#123;PROJECT_NAME&#125;_drupal&quot;    volumes:      - &quot;.&#x2F;drupal&#x2F;web:&#x2F;var&#x2F;www&#x2F;html&quot;    restart: always    privileged: true     depends_on:      - mysql    networks:      drupal-net:        ipv4_address: 192.158.0.3  mysql:    image: mysql:$MYSQL_TAG    container_name: &quot;$&#123;PROJECT_NAME&#125;_mysql&quot;    command: mysqld --default-authentication-plugin&#x3D;mysql_native_password    environment:      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD      MYSQL_USER: $DB_USER      MYSQL_PASSWORD: $DB_PASSWORD      MYSQL_DATABASE: $DB_NAME    volumes:      - &quot;.&#x2F;drupal&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql&quot;    ports:      - $DB_PORT    restart: always    networks:      drupal-net:        ipv4_address: 192.158.0.2      networks:  drupal-net:    ipam:      config:        - subnet: 192.158.0.0&#x2F;16</code></pre><h4 id="创建-env文件"><a href="#创建-env文件" class="headerlink" title="创建.env文件"></a>创建.env文件</h4><pre><code class="hljs $xslt"># .envPROJECT_NAME&#x3D;drupal8DRUPAL_VERSION&#x3D;8.8.3DRUPAL_TAG&#x3D;latestNGINX_TAG&#x3D;alpineNGINX_PORT&#x3D;80:80###  database ###MYSQL_TAG&#x3D;8DB_NAME&#x3D;drupalDB_USER&#x3D;adminDB_PASSWORD&#x3D;adminDB_ROOT_PASSWORD&#x3D;rootDB_PORT&#x3D;33060:3306</code></pre><h4 id="创建-drupal-test-conf-【nginx】配置文件"><a href="#创建-drupal-test-conf-【nginx】配置文件" class="headerlink" title="创建 drupal.test.conf 【nginx】配置文件"></a>创建 drupal.test.conf 【nginx】配置文件</h4><pre><code class="hljs plain">upstream drupal_php&#123;    server 192.158.0.3:80;    #server 192.158.0.5:80;    #server 192.158.0.6:80;&#125;server &#123;    listen       80;    server_name  drupal.test;location &#x2F; &#123;    proxy_set_header Host $host;        proxy_pass http:&#x2F;&#x2F;drupal_php&#x2F;;    &#125;&#125;</code></pre><h4 id="容器服务命令-在DrupalProject目录下执行"><a href="#容器服务命令-在DrupalProject目录下执行" class="headerlink" title="容器服务命令 [在DrupalProject目录下执行]"></a>容器服务命令 [在DrupalProject目录下执行]</h4><blockquote><p>启动容器</p></blockquote><pre><code class="hljs plain">docker-compose up -d</code></pre><p>容器启动以后，便可使用 drupal.test 【nginx配置域名及端口】 成功访问！</p><blockquote><p>停止容器</p></blockquote><pre><code class="hljs plain">docker-compose stop</code></pre><blockquote><p>删除容器</p></blockquote><pre><code class="hljs plain">docker-compose rm</code></pre><hr><h3 id="Drupal安装"><a href="#Drupal安装" class="headerlink" title="Drupal安装"></a>Drupal安装</h3><blockquote><p>访问域名 drupal.test 跳转至安装页面</p></blockquote><p><img src="/img/2020-05-20/drupal_install_1.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>安装语言 选择 English ,选择中国将会出现以下（图）错误提示</p></blockquote><p><img src="/img/2020-05-20/drupal_install_q_1.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>基于标准（Standard）/极简(Minimal)/案例(Demo) 选择安装</p></blockquote><p><img src="/img/2020-05-20/drupal_install_2.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>数据库配置，基于 .env 文件配置 </p></blockquote><pre><code class="hljs plain">* 数据库名 【Database name】  &#x3D;&gt; drupal* 数据库用户名 【Database username】  &#x3D;&gt; admin* 数据库密码 【Database password】  &#x3D;&gt; admin</code></pre><pre><code class="hljs plain">* 数据库访问地址 【Host】  &#x3D;&gt; 192.158.0.2 * 数据库访问端口 【Port number】  &#x3D;&gt; 3306* 数据库表前缀  【Table name prefix】 &#x3D;&gt; （可留空）</code></pre><p><img src="/img/2020-05-20/drupal_install_3.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>站点信息配置</p></blockquote><ul><li>Site name 【站点名称】</li><li>Site email address 【站点邮箱地址】</li><li>Username 【管理员用户名】</li><li>Password 【管理员用户密码】</li><li>Confirm password 【确认管理员用户密码】</li><li>Email address 【管理员邮箱地址】</li><li>Default country 【默认国家】</li><li>Default time zone 【默认时区】</li></ul><p><img src="/img/2020-05-20/drupal_install_4.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p><blockquote><p>Drupal安装完成！<br><img src="/img/2020-05-20/drupal_install_5.png" srcset="/img/loading.gif" alt="容器部署项目目录结构图"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>drupal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cms</tag>
      
      <tag>php</tag>
      
      <tag>drupal8</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
